

==== START OF FILE: src\App.css ====
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

==== END OF FILE: src\App.css ====


==== START OF FILE: src\App.js ====
import React from 'react';
import DemoPage from './components/DemoPage';

function App() {
    return (
        <div className="App">
            <DemoPage />
        </div>
    );
}

export default App;

==== END OF FILE: src\App.js ====


==== START OF FILE: src\App.test.js ====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

==== END OF FILE: src\App.test.js ====


==== START OF FILE: src\components\Accordion.js ====
import React, { useState, useRef, useEffect } from 'react';
import '../styles/accordion.css';

const AccordionItem = ({ title, children, isOpen, onClick }) => {
    const contentRef = useRef(null);

    useEffect(() => {
        if (contentRef.current) {
            contentRef.current.style.maxHeight = isOpen
                ? `${contentRef.current.scrollHeight}px`
                : '0px';
            contentRef.current.style.paddingTop = isOpen ? '15px' : '0px';
            contentRef.current.style.paddingBottom = isOpen ? '15px' : '0px';
            contentRef.current.style.opacity = isOpen ? '1' : '0'; // Ensure smooth opacity transition
        }
    }, [isOpen]);

    return (
        <div className="accordion-item">
            <div className="accordion-header" onClick={onClick}>
                {title}
                <span className={`arrow ${isOpen ? 'open' : ''}`}></span>
            </div>
            <div
                ref={contentRef}
                className={`accordion-body ${isOpen ? 'open' : ''}`}
            >
                {children}
            </div>
        </div>
    );
};

const Accordion = ({ items }) => {
    const [openIndex, setOpenIndex] = useState(null);

    const handleClick = (index) => {
        setOpenIndex(openIndex === index ? null : index);
    };

    return (
        <div className="accordion">
            {items.map((item, index) => (
                <AccordionItem
                    key={index}
                    title={item.title}
                    isOpen={openIndex === index}
                    onClick={() => handleClick(index)}
                >
                    {item.content}
                </AccordionItem>
            ))}
        </div>
    );
};

export default Accordion;

==== END OF FILE: src\components\Accordion.js ====


==== START OF FILE: src\components\Button.js ====
import React from 'react';
import '../styles/button.css';

const Button = ({ label, onClick, type = 'primary' }) => {
    return (
        <button className={`custom-button ${type} animate__animated animate__pulse`} onClick={onClick}>
            {label}
        </button>
    );
};

export default Button;

==== END OF FILE: src\components\Button.js ====


==== START OF FILE: src\components\DemoPage.js ====
import React, { useState } from 'react';
import Button from './Button';
import Slider from './Slider';
import Header from './Header';
import Tabs from './Tabs';
import LoadingAnimation from './LoadingAnimation';
import TextInput from './TextInput';
import Modal from './Modal';
import Tooltip from './Tooltip';
import Dropdown from './Dropdown';
import { ToastContainer, showToast } from './Toast';
import ProgressBar from './ProgressBar';
import Accordion from './Accordion';
import Pagination from './Pagination';
import '../styles/theme.css';

const DemoPage = () => {
    const [sliderValue, setSliderValue] = useState(50);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedOption, setSelectedOption] = useState('Option 1');
    const [currentPage, setCurrentPage] = useState(1);
    const accordionItems = [
        { title: "First Item", content: <p>This is the content for the first item.</p> },
        { title: "Second Item", content: <p>This is the content for the second item.</p> },
        { title: "Third Item", content: <p>This is the content for the third item.</p> }
    ];

    return (
        <div className="wrapper">
            <Header title="Demo UI Components" />

            <h2>Buttons</h2>
            <Button label="Primary Button" onClick={() => alert('Button clicked!')} type="primary" />
            <Button label="Secondary Button" onClick={() => alert('Button clicked!')} type="secondary" />

            <h2>Slider and Progress Bar</h2>
            <Slider min={0} max={100} value={sliderValue} onChange={(e) => setSliderValue(e.target.value)} />
            <ProgressBar progress={sliderValue} />
            <p>Slider Value: {sliderValue}</p>

            <h2>Tabs</h2>
            <Tabs tabs={[
                { label: 'Tab 1', content: <p>This is content for Tab 1.</p> },
                { label: 'Tab 2', content: <p>This is content for Tab 2.</p> },
                { label: 'Tab 3', content: <p>This is content for Tab 3.</p> },
            ]} />

            <h2>Loading Animation</h2>
            <LoadingAnimation />

            <h2>Text Input</h2>
            <TextInput label="Your Name" placeholder="Enter your name" />

            <h2>Modal</h2>
            <Button label="Open Modal" onClick={() => setIsModalOpen(true)} type="primary" />
            <Modal isOpen={isModalOpen} title="Demo Modal" onClose={() => setIsModalOpen(false)}>
                <p>This is a modal window content.</p>
            </Modal>

            <h2>Tooltip</h2>
            <Tooltip text="This is a tooltip!">
                <Button label="Hover over me" type="primary" />
            </Tooltip>

            <h2>Dropdown</h2>
            <Dropdown options={['Option 1', 'Option 2', 'Option 3']} selected={selectedOption} onChange={setSelectedOption} />
            <p>Selected: {selectedOption}</p>

            <h2>Toast</h2>
            <Button label="Show Toast" onClick={showToast} type="primary" />
            <ToastContainer />

            <h2>Accordion</h2>
            <Accordion items={accordionItems} />


            <h2>Pagination</h2>
            <Pagination currentPage={currentPage} totalPages={5} onPageChange={setCurrentPage} />

            <h2>Toggle Button</h2>
            <div className="toggle-button" onClick={(e) => e.target.classList.toggle('active')}></div>
        </div>
    );
};

export default DemoPage;

==== END OF FILE: src\components\DemoPage.js ====


==== START OF FILE: src\components\Dropdown.js ====
import React, { useState } from 'react';
import '../styles/dropdown.css';

const Dropdown = ({ options, selected, onChange }) => {
    const [isOpen, setIsOpen] = useState(false);

    const handleOptionClick = (option) => {
        onChange(option);
        setIsOpen(false);
    };

    return (
        <div className="dropdown">
            <button className="dropdown-button" onClick={() => setIsOpen(!isOpen)}>
                {selected}
                <span className={`arrow ${isOpen ? 'open' : ''}`}></span>
            </button>
            <ul className={`dropdown-menu ${isOpen ? 'show' : ''}`}>
                {options.map((option, index) => (
                    <li key={index} onClick={() => handleOptionClick(option)}>
                        {option}
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Dropdown;

==== END OF FILE: src\components\Dropdown.js ====


==== START OF FILE: src\components\Header.js ====
import React from 'react';
import '../styles/header.css';;

const Header = ({ title }) => {
    return (
        <header className="custom-header">
            <h1>{title}</h1>
        </header>
    );
};

export default Header;

==== END OF FILE: src\components\Header.js ====


==== START OF FILE: src\components\LoadingAnimation.js ====
import React from 'react';
import '../styles/loadingAnimation.css';

const LoadingAnimation = () => {
    return (
        <div className="loading-animation">
            <div className="dot"></div>
            <div className="dot"></div>
            <div className="dot"></div>
        </div>
    );
};

export default LoadingAnimation;

==== END OF FILE: src\components\LoadingAnimation.js ====


==== START OF FILE: src\components\Modal.js ====
import React from 'react';
import '../styles/modal.css';

const Modal = ({ isOpen, title, children, onClose }) => {
    if (!isOpen) return null;

    return (
        <div className="modal-overlay" onClick={onClose} style={{ zIndex: 10000 }}>
            <div className="modal" onClick={(e) => e.stopPropagation()}>
                <div className="modal-header">
                    <h2>{title}</h2>
                    <button className="close-button custom-button secondary" onClick={onClose}>&times;</button>
                </div>
                <div className="modal-body">
                    {children}
                </div>
            </div>
        </div>
    );
};

export default Modal;

==== END OF FILE: src\components\Modal.js ====


==== START OF FILE: src\components\Pagination.js ====

import React from 'react';
import '../styles/pagination.css';

const Pagination = ({ currentPage, totalPages, onPageChange }) => {
    const pages = [];
    for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
    }

    return (
        <div className="pagination">
            {pages.map(page => (
                <button 
                    key={page} 
                    className={`page-item ${page === currentPage ? 'active' : ''}`} 
                    onClick={() => onPageChange(page)}
                >
                    {page}
                </button>
            ))}
        </div>
    );
};

export default Pagination;

==== END OF FILE: src\components\Pagination.js ====


==== START OF FILE: src\components\ProgressBar.js ====
import styled from 'styled-components';

const ProgressBar = ({ progress }) => {
    return (
        <ProgressContainer>
            <ProgressWave progress={progress} />
        </ProgressContainer>
    );
};

const ProgressContainer = styled.div`
    width: 100%;
    background-color: #f1f1f1;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
    height: 20px;
`;

const ProgressWave = styled.div`
    width: ${(props) => props.progress}%;
    background: linear-gradient(270deg, #007bff, #0056b3);
    height: 100%;
    background-size: 400% 400%;
    animation: wave 1.5s ease-in-out infinite;
    
    @keyframes wave {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }
`;

export default ProgressBar;

==== END OF FILE: src\components\ProgressBar.js ====


==== START OF FILE: src\components\Slider.js ====
import React, { useState } from 'react';
import '../styles/slider.css';

const Slider = ({ min, max, value, onChange }) => {
    const [sliderValue, setSliderValue] = useState(value);

    const handleSliderChange = (e) => {
        setSliderValue(e.target.value);
        onChange(e);
    };

    return (
        <input 
            type="range" 
            min={min} 
            max={max} 
            value={sliderValue} 
            className="custom-slider" 
            onChange={handleSliderChange} 
        />
    );
};

export default Slider;

==== END OF FILE: src\components\Slider.js ====


==== START OF FILE: src\components\Tabs.js ====
import React, { useState } from 'react';
import '../styles/tabs.css';;

const Tabs = ({ tabs }) => {
    const [activeTab, setActiveTab] = useState(tabs[0].label);

    return (
        <div className="tabs">
            <div className="tab-headers">
                {tabs.map((tab) => (
                    <button 
                        key={tab.label} 
                        className={`tab-button ${activeTab === tab.label ? 'active' : ''}`}
                        onClick={() => setActiveTab(tab.label)}
                    >
                        {tab.label}
                    </button>
                ))}
            </div>
            <div className="tab-content">
                {tabs.find((tab) => tab.label === activeTab)?.content}
            </div>
        </div>
    );
};

export default Tabs;

==== END OF FILE: src\components\Tabs.js ====


==== START OF FILE: src\components\TextInput.js ====
import React, { useState } from 'react';
import '../styles/input.css';

const TextInput = ({ label, placeholder, error }) => {
    const [value, setValue] = useState('');

    return (
        <div className="input-group">
            <label>{label}</label>
            <input 
                type="text" 
                placeholder={placeholder} 
                value={value} 
                onChange={(e) => setValue(e.target.value)} 
                className={error ? 'error' : ''}
            />
            {error && <span className="error-message">{error}</span>}
        </div>
    );
};

export default TextInput;

==== END OF FILE: src\components\TextInput.js ====


==== START OF FILE: src\components\Toast.js ====

import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const showToast = () => {
    toast.success("This is a toast notification!");
};

export { ToastContainer, showToast };

==== END OF FILE: src\components\Toast.js ====


==== START OF FILE: src\components\Tooltip.js ====
import React from 'react';
import '../styles/tooltip.css';

const Tooltip = ({ text, children }) => {
    return (
        <div className="tooltip-container">
            {children}
            <span className="tooltip-text">{text}</span>
        </div>
    );
};

export default Tooltip;

==== END OF FILE: src\components\Tooltip.js ====


==== START OF FILE: src\index.css ====
body {
    margin: 0;
    font-family: 'Arial', sans-serif;
    background-color: #f0f2f5;
    color: #333;
}

#root {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

==== END OF FILE: src\index.css ====


==== START OF FILE: src\index.js ====
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
);

==== END OF FILE: src\index.js ====


==== START OF FILE: src\logo.svg ====
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
==== END OF FILE: src\logo.svg ====


==== START OF FILE: src\reportWebVitals.js ====
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

==== END OF FILE: src\reportWebVitals.js ====


==== START OF FILE: src\setupTests.js ====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

==== END OF FILE: src\setupTests.js ====


==== START OF FILE: src\styles\accordion.css ====
.accordion-item {
    border-bottom: 1px solid #ddd;
    margin: 0;
    padding: 0;
    width: 100%;
    box-sizing: border-box;
    position: relative;
}

/* Rounded corners for the topmost accordion */
.accordion-item:first-child .accordion-header {
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
}

/* Rounded corners for the bottommost accordion */
.accordion-item:last-child .accordion-body.open {
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 5px;
}

.accordion-header {
    padding: 15px;
    cursor: pointer;
    background-color: #f7f7f7;
    transition: background-color 0.3s ease;
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 18px;
    font-weight: bold;
    text-align: left;
    margin: 0;
    width: 100%;
    box-sizing: border-box;
}

.accordion-header:hover {
    background-color: #e2e2e2;
}

/* Blue design element */
.accordion-header::before {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 5px;
    background-color: #007bff;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.accordion-header:hover::before {
    opacity: 1;
}

.accordion-body {
    padding: 0 15px;
    background-color: white;
    border-top: 1px solid #ddd;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease, opacity 0.3s ease;
    margin: 0;
    width: 100%;
    box-sizing: border-box;
    opacity: 0; /* Start with 0 opacity for smooth transition */
}

.accordion-body.open {
    padding: 15px;
    opacity: 1; /* Ensure content fades in smoothly */
    min-height: 80px; /* Ensure a minimum height of 80px */
}

.arrow {
    margin-left: auto;
    border: solid #007bff;
    border-width: 0 2px 2px 0;
    padding: 5px;
    transform: rotate(45deg);
    transition: transform 0.3s ease;
}

.arrow.open {
    transform: rotate(-135deg);
}

/* Remove border on the last child */
.accordion-item:last-child {
    border-bottom: none;
}

==== END OF FILE: src\styles\accordion.css ====


==== START OF FILE: src\styles\button.css ====
.custom-button {
    padding: 12px 24px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    text-transform: uppercase;
    transition: background 0.4s ease, transform 0.1s ease, box-shadow 0.4s ease, color 0.4s ease;
    background: linear-gradient(135deg, #007bff, #0062cc);
    color: white;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

/* Hover state with a smooth gradient transition and subtle color change */
.custom-button:hover {
    background: linear-gradient(135deg, #0062cc, #004b99);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
    transform: translateY(-2px); /* Slight lift on hover */
}

/* Active/Pressed state with a subtle inset effect */
.custom-button:active {
    background: linear-gradient(135deg, #004b99, #003366);
    box-shadow: inset 0 4px 10px rgba(0, 0, 0, 0.3);
    transform: translateY(0); /* Reset lift on press */
}

/* Primary Button - subtle gradient with professional color scheme */
.custom-button.primary {
    background: linear-gradient(135deg, #007bff, #0062cc);
}

.custom-button.primary:hover {
    background: linear-gradient(135deg, #0062cc, #004b99);
}

.custom-button.primary:active {
    background: linear-gradient(135deg, #004b99, #003366);
}

/* Secondary Button - darker, more muted style */
.custom-button.secondary {
    background: linear-gradient(135deg, #5a6268, #444b51);
    color: #f8f9fa;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.custom-button.secondary:hover {
    background: linear-gradient(135deg, #444b51, #343a40);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
}

.custom-button.secondary:active {
    background: linear-gradient(135deg, #343a40, #212529);
    box-shadow: inset 0 4px 10px rgba(0, 0, 0, 0.3);
}

/* Disabled state */
.custom-button:disabled {
    background: linear-gradient(135deg, #b1b1b1, #919191);
    cursor: not-allowed;
    box-shadow: none;
}

==== END OF FILE: src\styles\button.css ====


==== START OF FILE: src\styles\dropdown.css ====
.dropdown {
    position: relative;
    display: inline-block;
    width: 100%;
    box-sizing: border-box;
}

.dropdown-button {
    background-color: #28a745;
    color: white;
    padding: 10px 15px;
    border: 2px solid #28a745;
    border-radius: 4px;
    cursor: pointer;
    width: 100%;
    text-align: left;
    transition: background-color 0.3s ease, border-color 0.3s ease;
    font-size: 16px;
    font-weight: bold;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-sizing: border-box;
}

.dropdown-button:hover {
    background-color: #218838;
    border-color: #218838;
}

.dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);
    margin-top: 5px;
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    visibility: hidden;
    transition: max-height 0.3s ease, opacity 0.3s ease, visibility 0.3s ease;
    z-index: 9999;
    box-sizing: border-box;
}

.dropdown-menu.show {
    max-height: 300px;
    opacity: 1;
    visibility: visible;
}

.dropdown-menu li {
    padding: 10px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    list-style: none;
}

.dropdown-menu li:hover {
    background-color: #f1f1f1;
}

.arrow {
    margin-left: auto;
    border: solid white;
    border-width: 0 2px 2px 0;
    padding: 3px;
    transform: rotate(-45deg);
    transition: transform 0.3s ease;
}

.arrow.open {
    transform: rotate(45deg);
}

==== END OF FILE: src\styles\dropdown.css ====


==== START OF FILE: src\styles\header.css ====
.custom-header {
    background-color: #343a40;
    padding: 20px;
    color: white;
    text-align: center;
}

.custom-header h1 {
    margin: 0;
    font-size: 2em;
}

==== END OF FILE: src\styles\header.css ====


==== START OF FILE: src\styles\input.css ====
.input-group {
    margin-bottom: 15px;
    width: 100%; /* Ensure the input group takes the full width of its container */
    box-sizing: border-box; /* Ensure padding and borders are included in the width */
}

.input-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    width: 100%;
    box-sizing: border-box;
}

.input-group input {
    width: 100%; /* Ensure the input field takes the full width of its container */
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    transition: border-color 0.2s ease;
    box-sizing: border-box; /* Ensure padding and borders are included in the width */
}

.input-group input:focus {
    border-color: #007bff;
    outline: none;
}

.input-group input.error {
    border-color: red;
}

.error-message {
    color: red;
    font-size: 12px;
    margin-top: 5px;
}

==== END OF FILE: src\styles\input.css ====


==== START OF FILE: src\styles\loadingAnimation.css ====
.loading-animation {
    display: flex;
    justify-content: center;
    align-items: center;
}

.dot {
    width: 10px;
    height: 10px;
    margin: 0 5px;
    background-color: #007bff;
    border-radius: 50%;
    animation: bounce 1.2s infinite ease-in-out;
}

.dot:nth-child(2) {
    animation-delay: -0.4s;
}

.dot:nth-child(3) {
    animation-delay: -0.2s;
}

@keyframes bounce {
    0%, 80%, 100% {
        transform: scale(0);
    }
    40% {
        transform: scale(1);
    }
}

==== END OF FILE: src\styles\loadingAnimation.css ====


==== START OF FILE: src\styles\modal.css ====
.modal-overlay {
    z-index: 10000;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
}

.modal {
    background: white;
    padding: 20px;
    border-radius: 5px;
    max-width: 500px;
    width: 100%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-body {
    margin-top: 20px;
}

.close-button { 
    background-color: #007bff; 
    border: none; 
    padding: 10px 15px; 
    border-radius: 50%; 
    cursor: pointer; 
    color: white; 
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.close-button:hover { 
    background-color: #0056b3; 
    transform: scale(1.1);
}

==== END OF FILE: src\styles\modal.css ====


==== START OF FILE: src\styles\pagination.css ====
.pagination {
    display: flex;
    justify-content: center;
    margin: 20px 0;
    font-family: 'Roboto', sans-serif;
}

.page-item {
    padding: 10px 15px;
    margin: 0 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.2s ease;
    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1);
}

.page-item.active {
    background-color: #007bff;
    color: white;
}

.page-item.active:hover {
    background-color: #0069d9; /* A lighter blue shade when active and hovered */
}

.page-item:hover {
    background-color: #f1f1f1;
    transform: scale(1.05);
}

==== END OF FILE: src\styles\pagination.css ====


==== START OF FILE: src\styles\progressBar.css ====
.progress-bar {
    width: 100%;
    background-color: #f1f1f1;
    border-radius: 4px;
    overflow: hidden;
}

.progress-bar-inner {
    height: 20px;
    background-color: #007bff;
    width: 0%;
    transition: width 0.3s ease;
}

==== END OF FILE: src\styles\progressBar.css ====


==== START OF FILE: src\styles\slider.css ====
.custom-slider {
    width: 100%;
    margin: 20px 0;
    -webkit-appearance: none;
    height: 8px;
    background: #ddd;
    border-radius: 5px;
    outline: none;
    opacity: 0.8;
    transition: opacity 0.2s;
}

.custom-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    background: #007bff;
    cursor: pointer;
    border-radius: 50%;
    transition: background-color 0.2s, transform 0.2s;
}

.custom-slider::-webkit-slider-thumb:hover {
    background-color: #0056b3;
    transform: scale(1.1);
}

.custom-slider::-webkit-slider-thumb:active {
    background-color: #003d80;
    transform: scale(1.2);
}

.custom-slider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: #007bff;
    cursor: pointer;
    border-radius: 50%;
    transition: background-color 0.2s, transform 0.2s;
}

.custom-slider::-moz-range-thumb:hover {
    background-color: #0056b3;
    transform: scale(1.1);
}

.custom-slider::-moz-range-thumb:active {
    background-color: #003d80;
    transform: scale(1.2);
}

==== END OF FILE: src\styles\slider.css ====


==== START OF FILE: src\styles\tabs.css ====
.tabs {
    margin: 20px 0;
}

.tab-headers {
    display: flex;
    justify-content: space-around;
    border-bottom: 2px solid #ddd;
}

.tab-button {
    flex: 1;
    background: none;
    border: none;
    padding: 15px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
    text-align: center;
}

.tab-button:hover {
    background-color: #f1f1f1;
}

.tab-button.active {
    color: #007bff;
    border-bottom: 2px solid #007bff;
    background-color: #e9ecef;
}

.tab-content {
    padding: 20px;
    background-color: #f8f9fa;
}

==== END OF FILE: src\styles\tabs.css ====


==== START OF FILE: src\styles\theme.css ====
body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f0f2f5;
    color: #333;
}

.wrapper {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.demo-page {
    padding: 20px;
    max-width: 100%;
    box-sizing: border-box;
}

h1, h2, h3, h4, h5, h6 {
    font-weight: bold;
}

.custom-header {
    background-color: #343a40;
    padding: 20px;
    color: white;
    text-align: center;
}

.custom-header h1 {
    margin: 0;
    font-size: 2em;
}

==== END OF FILE: src\styles\theme.css ====


==== START OF FILE: src\styles\toast.css ====
.toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: #007bff;
    color: white;
    padding: 10px 20px;
    border-radius: 4px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
    animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

.toast.success {
    background-color: #28a745;
}

.toast.error {
    background-color: #dc3545;
}

.toast button {
    background: none;
    border: none;
    font-size: 18px;
    color: white;
    cursor: pointer;
    margin-left: 10px;
}

@keyframes fadein {
    from {bottom: 0; opacity: 0;}
    to {bottom: 20px; opacity: 1;}
}

@keyframes fadeout {
    from {bottom: 20px; opacity: 1;}
    to {bottom: 0; opacity: 0;}
}

==== END OF FILE: src\styles\toast.css ====


==== START OF FILE: src\styles\tooltip.css ====
.tooltip-container {
    position: relative;
    display: inline-block;
    cursor: pointer;
}

.tooltip-text {
    visibility: hidden;
    background-color: #555;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%; /* Position above the element */
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity 0.3s;
}

.tooltip-container:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
}

==== END OF FILE: src\styles\tooltip.css ====
